/**
 *
 *  PostTag.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PostTag.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::blog;

const std::string PostTag::Cols::_post_id = "post_id";
const std::string PostTag::Cols::_tag_id = "tag_id";
const std::vector<std::string> PostTag::primaryKeyName = {"post_id","tag_id"};
const bool PostTag::hasPrimaryKey = true;
const std::string PostTag::tableName = "post_tag";

const std::vector<typename PostTag::MetaData> PostTag::metaData_={
{"post_id","int64_t","bigint",8,0,1,1},
{"tag_id","int64_t","bigint",8,0,1,1}
};
const std::string &PostTag::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PostTag::PostTag(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["post_id"].isNull())
        {
            postId_=std::make_shared<int64_t>(r["post_id"].as<int64_t>());
        }
        if(!r["tag_id"].isNull())
        {
            tagId_=std::make_shared<int64_t>(r["tag_id"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            postId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tagId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

PostTag::PostTag(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            postId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tagId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

PostTag::PostTag(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("post_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["post_id"].isNull())
        {
            postId_=std::make_shared<int64_t>((int64_t)pJson["post_id"].asInt64());
        }
    }
    if(pJson.isMember("tag_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tag_id"].isNull())
        {
            tagId_=std::make_shared<int64_t>((int64_t)pJson["tag_id"].asInt64());
        }
    }
}

void PostTag::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            postId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tagId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

void PostTag::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("post_id"))
    {
        if(!pJson["post_id"].isNull())
        {
            postId_=std::make_shared<int64_t>((int64_t)pJson["post_id"].asInt64());
        }
    }
    if(pJson.isMember("tag_id"))
    {
        if(!pJson["tag_id"].isNull())
        {
            tagId_=std::make_shared<int64_t>((int64_t)pJson["tag_id"].asInt64());
        }
    }
}

const int64_t &PostTag::getValueOfPostId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(postId_)
        return *postId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PostTag::getPostId() const noexcept
{
    return postId_;
}
void PostTag::setPostId(const int64_t &pPostId) noexcept
{
    postId_ = std::make_shared<int64_t>(pPostId);
    dirtyFlag_[0] = true;
}

const int64_t &PostTag::getValueOfTagId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(tagId_)
        return *tagId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PostTag::getTagId() const noexcept
{
    return tagId_;
}
void PostTag::setTagId(const int64_t &pTagId) noexcept
{
    tagId_ = std::make_shared<int64_t>(pTagId);
    dirtyFlag_[1] = true;
}

void PostTag::updateId(const uint64_t id)
{
}
typename PostTag::PrimaryKeyType PostTag::getPrimaryKey() const
{
    return std::make_tuple(*postId_,*tagId_);
}

const std::vector<std::string> &PostTag::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "post_id",
        "tag_id"
    };
    return inCols;
}

void PostTag::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getPostId())
        {
            binder << getValueOfPostId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTagId())
        {
            binder << getValueOfTagId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PostTag::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void PostTag::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getPostId())
        {
            binder << getValueOfPostId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTagId())
        {
            binder << getValueOfTagId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PostTag::toJson() const
{
    Json::Value ret;
    if(getPostId())
    {
        ret["post_id"]=(Json::Int64)getValueOfPostId();
    }
    else
    {
        ret["post_id"]=Json::Value();
    }
    if(getTagId())
    {
        ret["tag_id"]=(Json::Int64)getValueOfTagId();
    }
    else
    {
        ret["tag_id"]=Json::Value();
    }
    return ret;
}

Json::Value PostTag::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getPostId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfPostId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTagId())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfTagId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getPostId())
    {
        ret["post_id"]=(Json::Int64)getValueOfPostId();
    }
    else
    {
        ret["post_id"]=Json::Value();
    }
    if(getTagId())
    {
        ret["tag_id"]=(Json::Int64)getValueOfTagId();
    }
    else
    {
        ret["tag_id"]=Json::Value();
    }
    return ret;
}

bool PostTag::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("post_id"))
    {
        if(!validJsonOfField(0, "post_id", pJson["post_id"], err, true))
            return false;
    }
    else
    {
        err="The post_id column cannot be null";
        return false;
    }
    if(pJson.isMember("tag_id"))
    {
        if(!validJsonOfField(1, "tag_id", pJson["tag_id"], err, true))
            return false;
    }
    else
    {
        err="The tag_id column cannot be null";
        return false;
    }
    return true;
}
bool PostTag::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PostTag::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("post_id"))
    {
        if(!validJsonOfField(0, "post_id", pJson["post_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tag_id"))
    {
        if(!validJsonOfField(1, "tag_id", pJson["tag_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool PostTag::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PostTag::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
